Q 1. COUNT OF DIVISORS

public class Main
{
   public static void main(String[] args)
   {
      int arr[]={2,3,4,5};
      int ans[]=new int[arr.length];
      for(int i=0;i<arr.length;i++)
      {
        int count=0;
        for(int j=1;j<=arr[i]/2;j++)
        {
           if(arr[i]%j==0)
		   {
		      count++;
		   }
	    }
        ans[i]=count+1;
      }
      for(int i:ans)
	  {
	     System.out.print(i+" ");

	  }
  }
}

Q 2. PRIME SUM

public class Main 
{
   public static void main(String[] args)
   {
      int n=9;
      int[] check=new int[n+1];
      int ans[]=new int[2];
      check[0]=0;
      check[1]=0;
      for(int i=2;i<=n;i++)
      {
         check[i]=1;
      }
      for(int i=2;i*i<=n;i++)
      {
         if(check[i]==1)
         {
           for(int j=i*i;j<=n;j+=i)
           {
              check[j]=0;
           }
         }
      }
      for(int i=0;i<n;i++)
      {
         if(check[i]==check[n-i]) 
		 {
            ans[0]=i;
            ans[1]=n-i;
         }
      }
      for(int i:ans)
      {
        System.out.print(i+" ");

      }

    }
}

Q3. LUCKY NUMBERS

public class Main
{
     public static void main(String[] args)
	 {
        int n=12,ans=0;
        for(int i=1;i<=n;i++)
        {
           int count=0;
           for(int j=2;j<=n;j++)
           {
              if(i%j==0)
              {
                count++;
              }
           }
           if(count==2)
           {
              ans++;
           }
        }
        System.out.print(ans);
     }
}

Q 4. PRIME SUBSEQUENCEâ€™S

import java.util.*;
import java.lang.*;
public class Main
{
    private static List<List<Integer>> ans;
    public static void main(String[] args)
    {
       ans=new ArrayList<>();
       ArrayList<Integer> list=new ArrayList<>();
       int arr[]={1,2,3};
       int i=0;
       subSequence(arr,i,list);
       int max=0,count=0;
       for(int j=0;j<arr.length;j++)
       {
          if(max<arr[j])
          {
             max=arr[j];
          }
       }
       List<Integer> list1=new ArrayList<>();
       for(int j=2;j<=max;j++)
	   {
          int c=0;
          for (int k = 1; k <= max; k++)
	      {
            if (j % k == 0)
            {
              c++;
            }
          }
          if(c==2)
	      {
	       list1.add(j);
	      } 
      }
      ans.remove(ans.indexOf(ans.get(0)));
      for(int j=0;j<ans.size();j++)
      {
        int cnt=0;
        int l=ans.get(j).size();
        for(int k=0;k<l;k++)
        {
          int c=0,b=ans.get(j).get(k);
          for(int p:list1)
          {
             if(b==p)
			 {
               cnt++;
             }
          }
        }
        if(cnt==l)
        {
          count++;
        }
      }
       System.out.println(count);
    }
    private static void subSequence(int[] arr,int i,ArrayList<Integer> list)
    {
     if(i==arr.length)
	 {
	    ans.add(new ArrayList<>(list));
	 }
     else
	 {
        subSequence(arr,i+1,list);
        list.add(arr[i]);
        subSequence(arr,i+1,list);
        list.remove(list.size()-1);
     }
    }
}

Q 5. COMPUTE NCR % M

public class Main
{
   public static void main(String[] args)
   {
       int n=5;
       int r=2;
       int m=13;
       int n_fact=factorial(n);
       int r_fact=factorial(r);
       int n_r_fact=factorial(n-r);
       System.out.println(((int)n_fact/(n_r_fact*r_fact))%m);
   }
   private static int factorial(int n)
   {
       if(n==1)
	   {
	        return 1;
	   }
	   return n*factorial(n-1);
   }
}

Q 6. COMPUTE NCR % P

public class Main
{
     public static void main(String[] args)
	 {
        int n=5;
        int r=2;
        int p=13;
        int n_fact=factorial(n);
        int r_fact=factorial(r);
        int n_r_fact=factorial(n-r);
        System.out.println(((int)n_fact/(n_r_fact*r_fact))%p);
     }
     private static int factorial(int n)
     {
        if(n==1)
        {
          return 1;
        }
        return n*factorial(n-1);
     }
}


Q 7. DELETE ONE

public class Main
{
    public static void main(String[] args)
	{
        int[] arr={5,15,30};
        List<Integer> list=new ArrayList<>();
		for(int i=0;i<arr.length;i++)
		{
			if(i==arr.length-1)
			{
				list.add(gcd(arr[0],arr[i]));
			}
			else
			{
				list.add(gcd(arr[i],arr[i+1]));
			}
		}
		System.out.println(Collections.max(list));
	}
    private static int gcd(int a,int b)
	{
		if(b==0)
			return a;
		return gcd(b,a%b);
	}
}

Q 8. ENUMERATING GCD

public class Main
{
	public static void main(String[] args)
	{
		String str="1";
		String str1="3";
		int a=Integer.parseInt(str);
		int b=Integer.parseInt(str1);
		System.out.println(gcd(a,b));
	}
	private static int gcd(int a,int b)
	{
		if(b==0)
			return a;
		return gcd(b,a%b);
	}
}

Q 9. GREATEST COMMON DIVISOR

public class Main
{
	public static void main(String[] args) 
	{
		int a=7,b=6;
		System.out.println(gcd(a,b));
	}
	private static int gcd(int a,int b)
	{
	if(b==0)
		return a;
	return gcd(b,a%b);
	}
}

Q 10. PUBG

public class Main 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,3};
		List<Integer> list=new ArrayList<>();
		for(int i=0;i<arr.length;i++)
		{
			if(i==arr.length-1)
			{
				list.add(gcd(arr[0],arr[i]));
			}
			else
			{
				list.add(gcd(arr[i],arr[i+1]));
			}
		}
		System.out.println(Collections.min(list));
	}
	private static int gcd(int a,int b)
	{
		if(b==0)
			return a;
		return gcd(b,a%b);
	}
}
                                                      ---------X-------X-------X--------X-------X-------X--------X------------


                                                                       HOMEWORK:

Q 1. NUMBER OF OPEN DOORS

public class Main 
{
	public static void main(String[] args) 
	{
		int n=6;
		Boolean[] arr=new Boolean[n+1];
		for(int i=1;i<=n;i++)
		{
			for(int k=i;k<=n;k++)
			{
				if(i==1)
				{
					for(int j=0;j<=n;j++)
					arr[j]=true;
				}
				else if(i%k==0)
				{
					arr[k]=false;
				}
			}
		}
		int count=0;
		for(boolean i:arr)
		{
			if(i==true)
			count++;
		}
		System.out.println(count);
	}
}

Q 2. APTITUDE 47

public class Main 
{
	public static void main(String[] args)
	{
		int ans=0,sum=0;
		for(int i=0;i<6;i++)
		{
			for(int j=0;j<6;j++)
			{
				sum++;
				int c=0;
				for(int k=2;k<=11;k++)
				{
					if((i+1+j+1)%k==0)
					c++;
				}
				if(c==1)
				ans++;
			}
		}
	System.out.println(ans/sum);
	}
}

Q 3. PRIME ADDITION

public class Main 
{
	public static void main(String[] args) 
	{
		List<Integer> list=new ArrayList<>();
		int n=26;
		for(int i=2;i<=n;i++)
		{
			int c=0;
			for(int j=2;j<=n;j++)
			{
				if(i%j==0)
				c++;
			}
			if(c==1)
			{
				list.add(i);
			}
			System.out.println(list);
			int sum=n,count=0;
			for(int i=list.size()-1;i>=0;i--)
			{
				int max=Collections.max(list);
				if(sum>=max) 
				{
					sum-=max;
					count++;
				}
				list.remove(list.indexOf(max));
				if(sum==0)
					break;
			}
			System.out.println(count);
		}
	}
}

Q 4. DISTINCT PRIMES

public class Main 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,3,4};
		int g=1;
		for(int i:arr)	
		{
			g*=i;
		}
		Arrays.sort(arr);
		int count=0;
		List<Integer> list=new ArrayList<>();
		for(int i=2;i<=arr[arr.length-1];i++)
		{
			int c=0;
			for(int j=2;j<=arr[arr.length-1];j++)
			{
				if(i%j==0)
				c++;
			}
			if(c==1)
			list.add(i);
		}
		for(int i:list)
		{
			if(g%i==0)
			count++;
		}
		System.out.println(count);
	}
}

Q 5. SORTED PERMUTATION RANK

public class Main 
{
	static int fact(int n)
	{
		return (n<=1)?1:n*fact(n-1);
	}
	static int findSmallerInRight(String str, int low, int high)
	{
		int countRight=0,i;
		for (i=low+1;i<=high;i++)
		{
			if (str.charAt(i)<str.charAt(low))
			countRight++;
		}
		return countRight;
	}
	static int findRank(String str)
	{
		int len=str.length();
		int mul=fact(len);
		int rank=1;
		int countRight;
		for (int i=0;i<len;i++) 
		{
			mul/=len-i;//m=2
			countRight=findSmallerInRight(str,i,len-1);
			rank+=countRight*mul;
		}
		return rank;
	}
	public static void main(String[] args)
	{
		String str = "acb";
		System.out.println(findRank(str));
	}
}

Q 6. SORTED PERMUTATION RANK WITH REPEATS

public class Main 
{
	static int fact(int n)
	{
		return (n<=1)?1:n*fact(n-1);
	}
	static int findSmallerInRight(String str, int low, int high)
	{
		int countRight=0,i;
		for (i=low+1;i<=high;i++)
		if (str.charAt(i)<str.charAt(low))
		{
			countRight++;
		}
		return countRight;
	}
	static int findRank(String str)
	{
		int len=str.length();
		int mul=fact(len);
		int rank=1;
		int countRight;
		for (int i=0;i<len;i++) 
		{
			mul/=len-i;//m=2
			countRight=findSmallerInRight(str,i,len-1);
			rank+=countRight*mul;
		}
		return rank;
	}
	public static void main(String[] args)
	{
		String str = "bca";
		System.out.println(findRank(str));
	}
}

Q 8. LARGEST COPRIME DIVISOR

public class Main
{
    public static void main(String[] args)
    {
       int a=30,b=12,ans=0;
       List<Integer> list=new ArrayList<>();
       for(int i=1;i<=a;i++)
       {
         if(a%i==0 && gcd(i,b)==1)
		 {
		     ans=i;
         }

       }
	   System.out.println(ans);
	}
    public static int gcd(int a,int b)
    {
       if(b==0)
	   {
	       return a;
	   }
	   return gcd(b,a%b);
    }
}

Q 9. DIVISOR GAME

public class Main
{
    public static void main(String[] args)
    {
       int a=6,b=4,c=1;
       int max=Math.max(b,c);
       int count=0;
       for(int i=max;i<=a;i++)
	   {
	      if(i%b==0 && i%c==0)
		  {
		      count++;
		  }
	   }
       System.out.println(count);
    }
}

Q 10. ALL GCD PAIR

public class Main
{
    public static void main(String[] args)
    {
        int[] arr={2,2,2,2,8,2,2,2,10};
        LinkedHashSet<Integer> set=new LinkedHashSet<>();
        for(int i:arr)
		{
		    set.add(i);
		}
        System.out.println(set);
    }
}
